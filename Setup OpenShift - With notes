Boot from rhcos (CD-ROM): Bootstrap, Master and Worker
Boot from rhel (From cloned image): Bastion and HAProxy

For adding repository: (Bastion and HAProxy)
From CD-ROM
=========================================================
mkdir -p /mnt/rhel
mount -o loop /dev/sr0 /mnt/rhel
sudo cp /mnt/rhel/media.repo /etc/yum.repos.d/media.repo
sudo chmod 644 /etc/yum.repos.d/media.repo
sudo vi /etc/yum.repos.d/media.repo

[dvd-BaseOS]
name=DVD for RHEL8 - BaseOS
baseurl=file:///mnt/rhel/BaseOS
enabled=1

[dvd-AppStream]
name=DVD for RHEL8 - AppStream
baseurl=file:///mnt/rhel/AppStream
enabled=1

yum clean all
yum repolist enabled
=========================================================

Adding users: (Bastion and HAProxy)
=========================================================
useradd ocpa_admin1
passwd --stdin ocp_admin1
<Enter a Password>
usermod -aG wheel ocpa_admin1
=========================================================

NTP chrony configuration: (Bastion and HAProxy)
=========================================================
vi /etc/chrony.conf
server xxx.xxx.xxx.xxx iburst
=========================================================

Create Cronjob: (Bastion and HAProxy)
=========================================================
[Use root user]
crontab -e
0 0 * * 0 find /var/log/audit -type f -name "*.log.*" -mtime +40 -exec rm {} \;
=========================================================

Setup for HAProxy1
=========================================================
sudo yum install haproxy policycoreutils-python-utils keepalived chrony -y

[Adding NTP server]
vi /etc/resolv.conf
nameserver xxx.xxx.xxx.xxx

sudo setsebool -P haproxy_connect_any on --> Allows HAProxy to initiate connections to any address/port, which is necessary to function as intended in scenarios where traffic must be routed to various backend servers.
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --permanent --add-22623/tcp
sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --reload

[Adding the HAProxy configuration]
sudo vi /etc/haproxy/haproxy.cfg
<Add on>
frontend stats
  bind *:1936
  mode http
  log global
  maxconn 10
  stats enable
  stats hide-version
  stats refresh 30s
  stats show-node
  stats show-desc Stats for ocp4 cluster
  stats auth admin:ocp4
  stats uri /stats
listen api-server-6443
  bind *:6443
  mode tcp
  option  httpchk GET /readyz HTTP/1.0
  option  log-health-checks
  balance roundrobin
  server bootstrap <bootstrap-hostname>:6443 check inter 1s backup
  server master0 <master1-hostname>:6443 check inter 1s backup
  server master1 <master2-hostname>:6443 check inter 1s backup
  server master2 <master3-hostname>:6443 check inter 1s backup
listen machine-config-server-22623 --> Default port used by the Machine Config Server to serve Ignition files and other configuration data to master nodes. The nodes uses the configuration data to set up system services, networking, and other configurations.
  bind *:22623
  mode tcp
  server bootstrap <bootstrap-hostname>:22623 check inter 1s backup
  server master0 <master1-hostname>:22623 check inter 1s
  server master1 <master2-hostname>:22623 check inter 1s
  server master2 <master3-hostname>:22623 check inter 1s
listen ingress-router-443
  bind *:443
  mode tcp
  balance source
  server ingress1 <ingress1-hostname>:443 check inter 1s
  server ingress2 <ingress2-hostname>:443 check inter 1s
listen ingress-router-80
  bind *:80
  mode tcp
  balance source
  server ingress1 <ingress1-hostname>:80 check inter 1s
  server ingress2 <ingress2-hostname>:80 check inter 1s

[Adding the Keepalived configuration]
sudo vi /etc/keepalived/keepalived.conf
<1. Add in the VIP address 
2. Edit the network interface name (If applicable)>
Master Node
global_defs {
  router_id ovp_vrrp #Hostname of this host
}
vrrp_script haproxy_check {
  script "killall -0 haproxy"
  interval 2
  weight 100
}

vrrp_instance OCP_LB {
  state MASTER # Master -> Primary one that initially holds the Virtual IP address
  interface enp1s0 # Change if applicable
  virtual_router_id 215
  priority 100 # Higher number = Higher priority
  advert_int 1
  virtual_ipaddress {
    <lb-vip> # Add in the VIP address
  }
  track_script {
    haproxy_check
  }
  authentication {
    auth_type PASS
    auth_pass redhat
  }
}

[Enable the services]
sudo systemctl enable keepalived --now
sudo systemctl enable haproxy --now
=========================================================

Setup for HAProxy2
=========================================================
sudo yum install haproxy policycoreutils-python-utils keepalived chrony -y

[Adding NTP server]
vi /etc/resolv.conf
nameserver xxx.xxx.xxx.xxx

sudo setsebool -P haproxy_connect_any on
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --permanent --add-22623/tcp
sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --reload

[Adding the HAProxy configuration]
<Same as HAProxy1>

[Adding the Keepalived configuration]
sudo vi /etc/keepalived/keepalived.conf
<1. Add in the VIP address 
2. Edit the network interface name (If applicable)>
global_defs {
  router_id ovp_vrrp #hostname of this host
}

vrrp_script haproxy_check {
  script "killall -0 haproxy"
  interval 2
  weight 90 # Lower as compared to master
}

vrrp_instance OCP_LB {
  state BACKUP # Backup -> A backup will take over the VIP if the master instance becomes unavailable
  interface enp1s0
  virtual_router_id 215
  priority 50 # Lower priority as compared to the master
  advert_int 1
  virtual_ipaddress {
    <lb-vip>
  }
  track_script {
    haproxy_check
  }
  authentication {
    auth_type PASS
    auth_pass redhat
  }
}

[Enable the services]
sudo systemctl enable keepalived --now
sudo systemctl enable haproxy --now
=========================================================

